def run_busybox():
    # this call triggers the derivation to calculate and build
    bb = busybox()
    # whoami is now available to run
    print(cmd("whoami", clear_env=True, env={"PATH": bb.out + "/bin"}).output())


def busybox():
    # download the executable, this is the only way you are allowed
    # to use the network during builds
    download = derivation(
        name="busybox_download",
        builder="fetch_url",
        env={
            "url": "https://brmbl.s3.amazonaws.com/busybox-x86_64.tar.gz",
            "hash": "2ae410370b8e9113968ffa6e52f38eea7f17df5f436bd6a69cc41c6ca01541a1",
        },
    )

    # we pass the build_busybox callback here which is used to build this derivation
    return derivation(name="busybox", builder=build_busybox, build_inputs=[download])


def build_busybox():
    os.mkdir("$out/bin")  # using the builtin os module

    # move the busybox executable into the output for this build
    print(cmd("echo ok $busybox_download/busybox-x86_64").output())
    cmd(
        "$busybox_download/busybox-x86_64",
        "cp",
        "$busybox_download/busybox-x86_64",
        "$out/bin/busybox",
    ).wait()

    # extract the available commands from the busybox help text
    commands = []
    commands_started = False
    for line in cmd("$out/bin/busybox").output:
        if commands_started:
            for name in line.strip().split(","):
                name = name.strip()
                if name:
                    commands.append(name)
        if "Currently defined functions" in line:  # the builtin os module
            commands_started = True

    # cd into the output directory so that symlinks are relative
    os.cd("$out/bin")
    cmd("./busybox ln -s busybox ln").wait()

    # link each command so that we can use all the available busybox commands
    for c in commands:
        if c != "ln":
            cmd("./ln -s busybox %s" % c).output()
