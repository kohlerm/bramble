"""
Bramblescript examples
"""

cmd("ls -lah")  # done
cmd("ls", "-lah")  # done
cmd(["ls", "-lah"])  # done

# runs a command once
cmd("ls -lah").pipe("sort")

s = session()
s.env("FOO", "bar")
s.unset("FOO")

# runs and gives stdout as a string
s.cmd("df -h").stdout()  # done
s.cmd("df -h").combined_output()  # done
s.cmd("dh -h").stderr()  # done

# Assign stdin, can take stdout or just assignment
s.cmd("dh -h").stdin = other.stdout
s.cmd("dh -h").stdin = other.stderr
s.cmd("dh -h").stdin = other.combined_output
s.cmd("dh -h").stdin = other

for line in s.cmd("df -h").stdout:  # done
    print(line)

cmd("foo").if_err("echo failed")  # done

cmd("foo", stdin=bar, dir="../", env={"FOO": "BAR"})


# We can't chain abstracted commands


def cat(path, **kwargs):
    return cmd("cat", path, **kwargs)


def grep(*args, **kwargs):
    return cmd("grep", *args, **kwargs)


grep("foo", stdin=cat(path))

# oh we could allow the first function to be a callback, interesting
cat("file").pipe(grep, "foo")

# grep just has to be a function that can take a stdin
