""" the stdenv wooooo"""

load("github.com/maxmcd/bramble/lib/std")
load(nix_seed="github.com/maxmcd/bramble/lib/nix-seed")


def build_inputs():
    return [nix_seed.stdenv()]


def make(*args):
    return std.exec(nix_seed.stdenv().out + "/bin/make", *args)


def new_session_with_stdenv_path(s):
    new_s = os.session()
    for k, v in s.environ.items():
        new_s.setenv(k, v)
    output = nix_seed.stdenv().out
    if output in new_s.getenv("PATH"):
        return new_s
    new_s.setenv("PATH", "{}:{}/bin".format(s.getenv("PATH"), output))
    return new_s


def cp(session, *args):
    s = new_session_with_stdenv_path(session)
    return std.exec(s, "cp", *args)


def ls(session, path=None, human=False, all=False, long_list=False):
    s = new_session_with_stdenv_path(session)
    command = ["ls"]
    if path:
        command.append(path)
    if human:
        command.append("-h")
    if all:
        command.append("-a")
    if long_list:
        command.append("-l")
    return os.cmd(*command, env=s.environ)


def foo():
    s = new_session_with_stdenv_path(os.session())
    output = nix_seed.stdenv().out
    print(ls(s, output + "/bin", long_list=True).output())
    print(ls(s, "lib", human=True, all=True, long_list=True).output())


def gcc(s, *args):
    """hi"""
    output = nix_seed.stdenv().out
    s = s.setenv("PATH", "{}/bin".format(output))

    return std.exec(
        s,
        output + "/bin/gcc",
        "-L",
        "{}/lib".format(output),
        "-I",
        "{}/include".format(output),
        "-ffile-prefix-map=OLD=NEW",
        "-Wl,--rpath={}/lib".format(output),
        "-Wl,--dynamic-linker={}/lib/ld-linux-x86-64.so.2".format(output),
        *args,
    )
